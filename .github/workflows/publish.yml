name: "publish"
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/publish.yml'
      - 'package.json'
      - 'src-tauri/**/*'
      - 'src/**/*'
    branches:
      - stable
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `ttl-v${process.env.PACKAGE_VERSION}`,
              name: `Twintail Launcher v${process.env.PACKAGE_VERSION}`,
              body: 'If you are reading this I forgot to write release notes.',
              draft: true,
              prerelease: false
            })
            return data.id
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: pnpm install
      - uses: tauri-apps/tauri-action@v0
        if: matrix.platform == 'ubuntu-22.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}
      - uses: tauri-apps/tauri-action@v0
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
      - name: Find installer filename
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        id: find_installer
        run: |
          $file = Get-ChildItem -Path './src-tauri/target/release/bundle/nsis/' -Filter *.exe | Select-Object -First 1
          echo "installer_name=$($file.Name)" >> $env:GITHUB_ENV
      # Required for the artifact to be available on the GitHub server for windows signing
      - name: upload-unsigned-artifact
        if: matrix.platform == 'windows-latest'
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./src-tauri/target/release/bundle/nsis/${{ env.installer_name }}
      - name: sign-windows-build
        if: matrix.platform == 'windows-latest'
        id: sign-windows-build
        uses: signpath/github-action-submit-signing-request@v1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '5bcd459b-ba78-4556-b259-f7c3496d3497'
          project-slug: 'TwintailLauncher'
          signing-policy-slug: 'test-signing'
          artifact-configuration-slug: 'auto_github'
          github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: './src-tauri/target/release/bundle/nsis/'
      - name: upload-signed-artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/nsis/${{ env.installer_name }}
          asset_name: ${{ env.installer_name }}
          asset_content_type: application/octet-stream